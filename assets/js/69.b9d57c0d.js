(window.webpackJsonp=window.webpackJsonp||[]).push([[69],{682:function(t,s,a){"use strict";a.r(s);var n=a(47),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("最近在写Vue组件的时候遇到了需要用到大量文本作为参数的时候，遇到了这个换行的问题，遂记录一下。")]),t._v(" "),a("h2",{attrs:{id:"问题背景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#问题背景"}},[t._v("#")]),t._v(" 问题背景：")]),t._v(" "),a("p",[t._v("Vue渲染文本后，文本并不换行，换行符显示为一个空格。")]),t._v(" "),a("h2",{attrs:{id:"解决方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解决方法"}},[t._v("#")]),t._v(" 解决方法：")]),t._v(" "),a("p",[t._v("思路：实现文本换行有两种方法，一是HTML方法，即"),a("br"),t._v("标签；二是CSS方法，即white-space属性。")]),t._v(" "),a("p",[a("strong",[t._v("方法1.")]),t._v(" "),a("strong",[t._v("使用v-html")])]),t._v(" "),a("p",[t._v("首先，将字符串里的\\n替换为"),a("br"),t._v("，然后用v-html指令渲染字符串为innerHTML。")]),t._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[t._v("// JS部分\nthis.text = res.data."),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("/\\n/g"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'<br>'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n// HTML部分\n<div v-html="),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"text"')]),t._v("></div>\n")])])]),a("p",[t._v("这种方法比较麻烦，而且存在安全问题，故不推荐使用。")]),t._v(" "),a("p",[a("strong",[t._v("方法2. 设置white-space属性（推荐）")])]),t._v(" "),a("p",[t._v("将div容器的white-space属性设置为pre-wrap即可解决问题。")]),t._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token selector"}},[t._v("// CSS部分.text-wrapper")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("white-space")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" pre-wrap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token selector"}},[t._v('// HTML部分<div class="text-wrapper">')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("text"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("</div>\n")])])]),a("p",[a("strong",[t._v("white-space 可配置的值如下：")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("normal")]),t._v("\n连续的空白符会被合并，换行符会被当作空白符来处理。换行在填充「行框盒子(line boxes)」时是必要。")]),t._v(" "),a("li",[a("strong",[t._v("nowrap")]),t._v("\n和 normal 一样，连续的空白符会被合并。但文本内的换行无效。")]),t._v(" "),a("li",[a("strong",[t._v("pre")]),t._v("\n连续的空白符会被保留。在遇到换行符或者\n元素时才会换行。")]),t._v(" "),a("li",[a("strong",[t._v("pre-wrap")]),t._v("\n连续的空白符会被保留。在遇到换行符或者\n元素，或者需要为了填充「行框盒子(line boxes)」时才会换行。")]),t._v(" "),a("li",[a("strong",[t._v("pre-line")]),t._v(" "),a("em",[t._v("连续的空白符会被合并。在遇到换行符或者\n元素，或者需要为了填充「行框盒子(line boxes)」时会换行。")])]),t._v(" "),a("li",[a("strong",[t._v("break-spaces")]),t._v("\n与 pre-wrap的行为相同，除了：\n任何保留的空白序列总是占用空间，包括在行尾。\n每个保留的空格字符后都存在换行机会，包括空格字符之间。\n这样保留的空间占用空间而不会挂起，从而影响盒子的固有尺寸（最小内容大小和最大内容大小）。")])]),t._v(" "),a("p",[t._v("PS.数据清洗真是一门令人头秃秃且经历大起大落的手艺。")]),t._v(" "),a("hr")])}),[],!1,null,null,null);s.default=e.exports}}]);