(window.webpackJsonp=window.webpackJsonp||[]).push([[72],{686:function(t,a,s){"use strict";s.r(a);var n=s(47),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("谁能想到，这竟然是“豪门”之间的一场恩怨~")]),t._v(" "),s("h2",{attrs:{id:"缘起"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#缘起"}},[t._v("#")]),t._v(" 缘起")]),t._v(" "),s("p",[s("code",[t._v("事件冒泡")]),t._v("和"),s("code",[t._v("事件捕获")]),t._v("分别由"),s("code",[t._v("微软")]),t._v("和"),s("code",[t._v("网景")]),t._v("公司提出，这两个概念都是为了解决页面中事件流（事件发生顺序）的问题。\n考虑下面这段代码，就不写html->head,body之类的代码了，自行脑补")]),t._v(" "),s("div",{staticClass:"language-html extra-class"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("id")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("outer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("p")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("id")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("inner"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("Click me!"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("p")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),s("p",[t._v("上面的代码当中一个div元素当中有一个p子元素，如果两个元素都有一个click的处理函数，那么我们怎么才能知道哪一个函数会首先被触发呢？\n为了解决这个问题微软和网景提出了两种几乎完全相反的概念。")]),t._v(" "),s("h2",{attrs:{id:"事件冒泡"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#事件冒泡"}},[t._v("#")]),t._v(" 事件冒泡")]),t._v(" "),s("p",[t._v("微软提出了名为"),s("code",[t._v("事件冒泡(event bubbling)")]),t._v("的事件流。事件冒泡可以形象地比喻为把一颗石头投入水中，泡泡会一直从水底冒出水面。也就是说，事件会从最内层的元素开始发生，一直向上传播，直到document对象。")]),t._v(" "),s("p",[t._v("因此在事件冒泡的概念下在p元素上发生click事件的顺序应该是"),s("code",[t._v("p -> div -> body -> html -> document")])]),t._v(" "),s("h2",{attrs:{id:"事件捕获"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#事件捕获"}},[t._v("#")]),t._v(" 事件捕获")]),t._v(" "),s("p",[t._v("网景提出另一种事件流名为"),s("code",[t._v("事件捕获(event capturing)")]),t._v("。与事件冒泡相反，事件会从最外层开始发生，直到最具体的元素。")]),t._v(" "),s("p",[t._v("因此在事件捕获的概念下在p元素上发生click事件的顺序应该是"),s("code",[t._v("document -> html -> body -> div -> p")])]),t._v(" "),s("h2",{attrs:{id:"addeventlistener的第三个参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#addeventlistener的第三个参数"}},[t._v("#")]),t._v(" addEventListener的第三个参数")]),t._v(" "),s("p",[t._v("网景 和 微软 曾经的战争还是比较火热的，当时， 网景主张捕获方式，微软主张冒泡方式。后来 w3c 采用折中的方式，平息了战火，制定了统一的标准——"),s("strong",[t._v("先捕获再冒泡")]),t._v("。\naddEventListener的第三个参数就是为冒泡和捕获准备的.\naddEventListener有三个参数：")]),t._v(" "),s("blockquote",[s("p",[t._v("element.addEventListener(event, function, useCapture)")])]),t._v(" "),s("p",[t._v("第一个参数是需要绑定的事件\n第二个参数是触发事件后要执行的函数\n第三个参数默认值是false，表示在"),s("strong",[t._v("事件冒泡阶段")]),t._v("调用事件处理函数;如果参数为true，则表示在"),s("strong",[t._v("事件捕获阶段")]),t._v("调用处理函数。")]),t._v(" "),s("h2",{attrs:{id:"事件捕获vs事件冒泡"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#事件捕获vs事件冒泡"}},[t._v("#")]),t._v(" 事件捕获vs事件冒泡")]),t._v(" "),s("p",[t._v("当事件捕获和事件冒泡一起存在的情况，事件又是如何触发呢。\n这里记被点击的DOM节点为target节点")]),t._v(" "),s("ol",[s("li",[t._v("document 往 target节点，捕获前进，遇到注册的捕获事件立即触发执行")]),t._v(" "),s("li",[t._v("到达target节点，触发事件（对于target节点上，是先捕获还是先冒泡则捕获事件和冒泡事件的注册顺序，先注册先执行）")]),t._v(" "),s("li",[t._v("target节点 往 document 方向，冒泡前进，遇到注册的冒泡事件立即触发")])]),t._v(" "),s("h2",{attrs:{id:"事件的代理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#事件的代理"}},[t._v("#")]),t._v(" 事件的代理")]),t._v(" "),s("p",[t._v("由于事件会在冒泡阶段向上传播到父节点，因此可以把子节点的监听函数定义在父节点上，由父节点的监听函数统一处理多个子元素的事件。这种方法叫做事件的代理（delegation）。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" ul "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("querySelector")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ul'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nul"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'click'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("event")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("event"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("target"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tagName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toLowerCase")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'li'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// some code")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("上面代码中，"),s("code",[t._v("click")]),t._v("事件的监听函数定义在"),s("code",[t._v("<ul>")]),t._v("节点，但是实际上，它处理的是子节点"),s("code",[t._v("<li>")]),t._v("的"),s("code",[t._v("click")]),t._v("事件。这样做的好处是，只要定义一个监听函数，就能处理多个子节点的事件，而不用在每个"),s("code",[t._v("<li>")]),t._v("节点上定义监听函数。而且以后再添加子节点，监听函数依然有效。")]),t._v(" "),s("h3",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),s("ul",[s("li",[t._v("对于非target节点则先执行捕获在执行冒泡")]),t._v(" "),s("li",[t._v("对于target节点则是先执行先注册的事件，无论冒泡还是捕获")])]),t._v(" "),s("hr")])}),[],!1,null,null,null);a.default=e.exports}}]);