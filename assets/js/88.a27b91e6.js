(window.webpackJsonp=window.webpackJsonp||[]).push([[88],{700:function(t,s,a){"use strict";a.r(s);var e=a(47),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[a("code",[t._v("key")]),t._v(" 是特殊的 attribute ，主要用做 Vue 的虚拟 DOM 算法的提示，以在比对新旧节点组时辨识 VNodes。")]),t._v(" "),a("p",[t._v("就目前所了解的情况，key的作用有以下这些。")]),t._v(" "),a("ul",[a("li",[t._v("v-for遍历时，用id，uuid之类作为key，唯一标识节点加速虚拟DOM渲染")]),t._v(" "),a("li",[t._v("响应式系统没有监听到的数据，用+new Date()生成的时间戳作为key，手动强制触发重新渲染")])]),t._v(" "),a("p",[t._v("场景一大同小异司空见惯，场景二是下面这样的：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("div "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"rerender"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("span"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("Hello Vue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("js "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("span"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("complexComponent "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("propObj"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"propObj"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("propArr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"propArr"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("complexComponent"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("div"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("refresh")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rerender "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Date")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n复制代码\n")])])]),a("p",[t._v("那么vue中key的相关知识点到底是怎样的呢？")]),t._v(" "),a("ul",[a("li",[t._v("官方API知识点")]),t._v(" "),a("li",[t._v("上面2个使用场景背后的原理是什么？")]),t._v(" "),a("li",[t._v("除key外，还有其它强制更新DOM的方法吗？")]),t._v(" "),a("li",[t._v("参考资料")])]),t._v(" "),a("h3",{attrs:{id:"官方api知识点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#官方api知识点"}},[t._v("#")]),t._v(" 官方API知识点")]),t._v(" "),a("ul",[a("li",[t._v("在Vue.js中，key是6个特殊属性key, ref, is, slot, slot-scope, scope其中之一。")]),t._v(" "),a("li",[t._v("key的值可以是number，也可以是string。")]),t._v(" "),a("li",[t._v("key主要作用于Vue的virtual DOM算法，在diff new nodes list和old nodes list时，作为识别VNode的一个线索。")]),t._v(" "),a("li",[t._v("如果不用key，Vue会用一种算法：最小化element的移动，并且会尝试尽最大程度在同适当的地方对相同类型的element，做patch或者reuse。")]),t._v(" "),a("li",[t._v("如果使用了key，Vue会根据keys的顺序记录element，"),a("strong",[t._v("曾经拥有了key的element如果不再出现的话，会被直接remove或者destoryed。")])]),t._v(" "),a("li",[t._v("拥有同一个parent的children必须有unique keys。重复的key的导致render error。")])]),t._v(" "),a("h4",{attrs:{id:"最常用的用法一-v-for"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#最常用的用法一-v-for"}},[t._v("#")]),t._v(" 最常用的用法一：v-for")]),t._v(" "),a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("ul")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("li")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("v-for")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("item in items"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v(":key")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("item.id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("..."),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("li")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("ul")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("h4",{attrs:{id:"最常用的用法二-强制替换element或者component"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#最常用的用法二-强制替换element或者component"}},[t._v("#")]),t._v(" 最常用的用法二：强制替换element或者component")]),t._v(" "),a("ul",[a("li",[t._v("触发组件的lifecycle")]),t._v(" "),a("li",[t._v("触发transition")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<transition>\n  <span :key="text">{{ text }}</span>\n</transition>\n复制代码\n')])])]),a("p",[t._v("text发生变化时，"),a("code",[t._v("<span>")]),t._v("会被replaced，而不会patched，因此transition会被触发。 我的理解： "),a("strong",[t._v("text变化时，span的key发生了变化，也就是说曾经拥有了旧key的span不再出现了，当拥有新值的text作为key时，拥有了新key的span出现了，那么旧key span会被移除，旧transition也会移除，新key span触发渲染，新transition触发。")])]),t._v(" "),a("h3",{attrs:{id:"上面2个使用场景背后的原理是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#上面2个使用场景背后的原理是什么"}},[t._v("#")]),t._v(" 上面2个使用场景背后的原理是什么？")]),t._v(" "),a("p",[t._v("结合官方API的知识点，现在再来回顾文章开头提出的场景。")]),t._v(" "),a("h4",{attrs:{id:"场景一-v-for遍历时-用id-uuid之类作为key-唯一标识节点加速虚拟dom渲染"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#场景一-v-for遍历时-用id-uuid之类作为key-唯一标识节点加速虚拟dom渲染"}},[t._v("#")]),t._v(" 场景一：v-for遍历时，用id，uuid之类作为key，唯一标识节点加速虚拟DOM渲染")]),t._v(" "),a("p",[t._v("答案：")]),t._v(" "),a("ul",[a("li",[t._v("如果不用key，Vue会用一种算法：最小化element的移动，并且会尝试尽最大程度在同适当的地方对相同类型的element，做patch或者reuse。")]),t._v(" "),a("li",[t._v("如果使用了key，Vue会根据keys的顺序记录element，"),a("strong",[t._v("曾经拥有了key的element如果不再出现的话，会被直接remove或者destoryed。")])])]),t._v(" "),a("h4",{attrs:{id:"场景二-响应式系统没有监听到的数据-用-new-date-生成的时间戳作为key-手动强制触发重新渲染"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#场景二-响应式系统没有监听到的数据-用-new-date-生成的时间戳作为key-手动强制触发重新渲染"}},[t._v("#")]),t._v(" 场景二：响应式系统没有监听到的数据，用+new Date()生成的时间戳作为key，手动强制触发重新渲染")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("div "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"rerender"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("span"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("Hello Vue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("js "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("span"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("complexComponent "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("propObj"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"propObj"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("propArr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"propArr"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("complexComponent"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("div"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("refresh")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rerender "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Date")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n复制代码\n")])])]),a("p",[t._v("答案：")]),t._v(" "),a("ul",[a("li",[t._v("如果使用了key，Vue会根据keys的顺序记录element，"),a("strong",[t._v("曾经拥有了key的element如果不再出现的话，会被直接remove或者destoryed。")])]),t._v(" "),a("li",[t._v("refresh方法调用后，包含了span和complexComponent的div的key发生了变化，也就是说曾经拥有了旧key的div不再出现了，当拥有新值的rerender作为key时，拥有了新key的div出现了，那么旧key div会被移除，旧span和complexComponent也会移除，新key div触发渲染，新span，"),a("strong",[t._v("带着父组件新propObj和propArr的新complexComponent渲染。")])])]),t._v(" "),a("p",[t._v("思考：")]),t._v(" "),a("ol",[a("li",[t._v("为什么要叫propObj和propArr？")]),t._v(" "),a("li",[a("strong",[t._v("带着父组件新propObj和propArr的新complexComponent渲染。")]),t._v(" 为什么要加粗？")])]),t._v(" "),a("p",[t._v("由于Vue.js的obj和arr存在无法检测到数据变化的情况，obj是属性的新增和删除（原因是新增和删除都没有触发setter，watcher未告诉外界更新），arr则是数组内元素重新赋值或者修改length属性（原因是没有使用改变数组本身的方法，没有触发数组原型链拦截器，watcher未告诉外界更新）。 所以！通过赋予新key的方式，移除旧key div，渲染新key div，propObj和propArr在complexComponent组件内会重新触发一次生命周期，做一次重新渲染。**此时父组件的propObj和propArr js变量其实已经获取到新值了，只是没有触发DOM也好，VNode也好的重新渲染。**需要通过刷新key去force update，说到forceUpdate，可以通过$forceUpdate()去手动强制更新DOM。")]),t._v(" "),a("h3",{attrs:{id:"除key外-还有其它强制更新dom的方法吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#除key外-还有其它强制更新dom的方法吗"}},[t._v("#")]),t._v(" 除key外，还有其它强制更新DOM的方法吗？")]),t._v(" "),a("p",[t._v("场景：父组件修改传递给子组件的数据，数组数据的更新没有按照this.$set去更新。该怎么办？")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("productImages"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("product")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("product"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("productId "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("productsState"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    product"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("status "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("productsState"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("product"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("productId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n复制代码\n")])])]),a("p",[a("strong",[t._v("不使用this.$set去赋值数据的不能rerender的原因是什么？")]),t._v(" 在Vue.js中，对Array的变化侦测是通过拦截原型的方式实现的。也就通过对push，pop，shift，unshift，splice，sort，reverse，fill，copyWithin去改变数组自身内容的方法做拦截，从而响应。而"),a("code",[t._v("product.status = this.productsState[product.productId];")]),t._v("没有触发任何改变数组自身的被监听的方法，因此不会rerender。")]),t._v(" "),a("ul",[a("li",[t._v("刷新组件的key")]),t._v(" "),a("li",[t._v("$forceUpdate方法")])]),t._v(" "),a("h4",{attrs:{id:"刷新组件的key"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#刷新组件的key"}},[t._v("#")]),t._v(" 刷新组件的key")]),t._v(" "),a("h5",{attrs:{id:"_1-这个key加在什么地方比较好"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-这个key加在什么地方比较好"}},[t._v("#")]),t._v(" 1.这个key加在什么地方比较好？")]),t._v(" "),a("p",[t._v("加在this.productImages的父元素上就好。 若不涉及数据传递，也可以直接加在需要更新的element上。")]),t._v(" "),a("h5",{attrs:{id:"_2-用什么做key值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-用什么做key值"}},[t._v("#")]),t._v(" 2.用什么做key值？")]),t._v(" "),a("p",[t._v("现在是粗暴的+new Date()时间戳做key值的。 也可以用双向绑定的值作为key值，保证新旧key值不同就行。")]),t._v(" "),a("h5",{attrs:{id:"_3-key的原理是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-key的原理是什么"}},[t._v("#")]),t._v(" 3.key的原理是什么？")]),t._v(" "),a("p",[t._v("vue.js的虚拟DOM算法，在更新vNode时，需要从旧vNode列表中查找与新vNode节点相同的vNode进行更新，如果这个过程设置了属性key，过程就会快很多。 其他具体见上文。")]),t._v(" "),a("h4",{attrs:{id:"forceupdate方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#forceupdate方法"}},[t._v("#")]),t._v(" $forceUpdate方法")]),t._v(" "),a("p",[a("strong",[t._v("只能在父组件调用这个方法，手动通知vue实例重新渲染。")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// $forceUpdate源码")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Vue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("$forceUpdate")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" vm"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Component "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_watcher"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    vm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_watcher"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("update")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// update源码")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * Subscriber interface.\n * Will be called when a dependency changes.\n */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("update")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* istanbul ignore else */")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lazy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dirty "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sync"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("queueWatcher")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h5",{attrs:{id:"_1-forceupdate可以更新的原理分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-forceupdate可以更新的原理分析"}},[t._v("#")]),t._v(" 1.$forceUpdate可以更新的原理分析")]),t._v(" "),a("p",[a("code",[t._v("product.status = this.productsState[product.productId];")]),t._v("以后，"),a("strong",[t._v("其实此时dep已经发生变化了")]),t._v("，但是Vue.js数组响应式的实现由于是拦截原型链方法的方式，没有检测到这个变化，所以不会自动rerender，没有触发update。因此我们"),a("strong",[t._v("通过$forceUpdate的方式，调用包含dep的watcher上的update方法，从而做到rerender")]),t._v("。")]),t._v(" "),a("h5",{attrs:{id:"_2-可以在子组件监听事件-父组件发送事件然后只刷新子组件吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-可以在子组件监听事件-父组件发送事件然后只刷新子组件吗"}},[t._v("#")]),t._v(" 2.可以在子组件监听事件，父组件发送事件然后只刷新子组件吗？")]),t._v(" "),a("p",[t._v("不可以。 因为dep是父组件的watcher和dep，并不是子组件，是父组件的this.productImages没有被检测到并实时更新，并不是子组件的问题。")]),t._v(" "),a("hr")])}),[],!1,null,null,null);s.default=n.exports}}]);